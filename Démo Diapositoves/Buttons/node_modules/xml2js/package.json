{
  "_args": [
    [
      "xml2js@git+https://github.com/fraunhoferfokus/node-xml2js.git",
      "C:\\Users\\mkostiuk\\Documents\\components_upnp\\Buttons\\node_modules\\peer-upnp"
    ]
  ],
  "_from": "git+https://github.com/fraunhoferfokus/node-xml2js.git",
  "_id": "xml2js@0.2.8",
  "_inCache": true,
  "_installable": true,
  "_location": "/xml2js",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/fraunhoferfokus/node-xml2js/master/package.json",
      "gitUrl": "git://github.com/fraunhoferfokus/node-xml2js.git",
      "httpsUrl": "git+https://github.com/fraunhoferfokus/node-xml2js.git",
      "shortcut": "github:fraunhoferfokus/node-xml2js",
      "ssh": "git@github.com:fraunhoferfokus/node-xml2js.git",
      "sshUrl": "git+ssh://git@github.com/fraunhoferfokus/node-xml2js.git",
      "type": "github"
    },
    "name": "xml2js",
    "raw": "xml2js@git+https://github.com/fraunhoferfokus/node-xml2js.git",
    "rawSpec": "git+https://github.com/fraunhoferfokus/node-xml2js.git",
    "scope": null,
    "spec": "git+https://github.com/fraunhoferfokus/node-xml2js.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/peer-upnp"
  ],
  "_resolved": "git+https://github.com/fraunhoferfokus/node-xml2js.git#e89c2e85a6f0eb508405c0d333c7d2e421c05548",
  "_shasum": "ea5c6b91ce5e030a03a754a24dcd3fd70d42a2ed",
  "_shrinkwrap": null,
  "_spec": "xml2js@git+https://github.com/fraunhoferfokus/node-xml2js.git",
  "_where": "C:\\Users\\mkostiuk\\Documents\\components_upnp\\Buttons\\node_modules\\peer-upnp",
  "author": {
    "email": "marek@xivilization.net",
    "name": "Marek Kubica",
    "url": "http://xivilization.net"
  },
  "bugs": {
    "url": "https://github.com/Leonidas-from-XIV/node-xml2js/issues"
  },
  "contributors": [
    {
      "name": "Michael Hart",
      "url": "https://github.com/mhart"
    },
    {
      "name": "maqr",
      "email": "maqr.lollerskates@gmail.com",
      "url": "https://github.com/maqr"
    },
    {
      "name": "Jae Kwon",
      "url": "https://github.com/jaekwon"
    },
    {
      "name": "Jim Robert"
    },
    {
      "name": "Ștefan Rusu",
      "url": "http://www.saltwaterc.eu/"
    },
    {
      "name": "Carter Cole",
      "email": "carter.cole@cartercole.com",
      "url": "http://cartercole.com/"
    },
    {
      "name": "Kurt Raschke",
      "email": "kurt@kurtraschke.com",
      "url": "http://www.kurtraschke.com/"
    },
    {
      "name": "Contra",
      "email": "contra@australia.edu",
      "url": "https://github.com/Contra"
    },
    {
      "name": "Marcelo Diniz",
      "email": "marudiniz@gmail.com",
      "url": "https://github.com/mdiniz"
    },
    {
      "name": "Ben Weaver",
      "url": "http://benweaver.com/"
    },
    {
      "name": "Zachary Scott",
      "email": "zachary@zacharyscott.net",
      "url": "http://zacharyscott.net/"
    },
    {
      "name": "Raoul Millais",
      "url": "https://github.com/raoulmillais"
    },
    {
      "name": "Salsita Software",
      "url": "http://www.salsitasoft.com/"
    },
    {
      "name": "Mike Schilling",
      "email": "mike@emotive.com",
      "url": "http://www.emotive.com/"
    },
    {
      "name": "Jackson Tian",
      "email": "shyvo1987@gmail.com",
      "url": "http://weibo.com/shyvo"
    },
    {
      "name": "Mikhail Zyatin",
      "email": "mikhail.zyatin@gmail.com",
      "url": "https://github.com/Sitin"
    },
    {
      "name": "Chris Tavares",
      "email": "ctavares@microsoft.com",
      "url": "https://github.com/christav"
    },
    {
      "name": "Frank Xu",
      "email": "yyfrankyy@gmail.com",
      "url": "http://f2e.us/"
    }
  ],
  "dependencies": {
    "sax": "0.5.x"
  },
  "description": "Simple XML to JavaScript object converter.",
  "devDependencies": {
    "coffee-script": ">=1.6.3",
    "docco": ">=0.6.2",
    "zap": ">=0.2.5"
  },
  "directories": {
    "lib": "./lib"
  },
  "gitHead": "e89c2e85a6f0eb508405c0d333c7d2e421c05548",
  "homepage": "https://github.com/Leonidas-from-XIV/node-xml2js",
  "keywords": [
    "json",
    "xml"
  ],
  "main": "./lib/xml2js",
  "name": "xml2js",
  "optionalDependencies": {},
  "readme": "This is a fork of https://github.com/Leonidas-from-XIV/node-xml2js. \r\n\r\nThis version of node-xml2js supports a new configuration parameter `ignoreXmlns` which \r\nis boolean parameter and is false by default. If `ignoreXmlns` is true, then all XML namespaces \r\nwill be ignored in the JSON key names. For example for XML node `<ns:a>hello</ns:a>` will be converted in \r\n`{a: \"hello\"}` instead of `{'ns:a': \"hello\"}`.\r\n\r\nThx to [Marek Kubica](https://github.com/Leonidas-from-XIV) for the greate work. \r\n\r\nBelow is the original node-xml2js documentation. \r\n\r\nnode-xml2js \r\n===========\r\n\r\nEver had the urge to parse XML? And wanted to access the data in some sane,\r\neasy way? Don't want to compile a C parser, for whatever reason? Then xml2js is\r\nwhat you're looking for!\r\n\r\nDescription\r\n===========\r\n\r\nSimple XML to JavaScript object converter. Uses\r\n[sax-js](https://github.com/isaacs/sax-js/).\r\n\r\nNote: If you're looking for a full DOM parser, you probably want\r\n[JSDom](https://github.com/tmpvar/jsdom).\r\n\r\nInstallation\r\n============\r\n\r\nSimplest way to install `xml2js` is to use [npm](http://npmjs.org), just `npm\r\ninstall xml2js` which will download xml2js and all dependencies.\r\n\r\nUsage\r\n=====\r\n\r\nNo extensive tutorials required because you are a smart developer! The task of\r\nparsing XML should be an easy one, so let's make it so! Here's some examples.\r\n\r\nShoot-and-forget usage\r\n----------------------\r\n\r\nYou want to parse XML as simple and easy as possible? It's dangerous to go\r\nalone, take this:\r\n\r\n```javascript\r\nvar parseString = require('xml2js').parseString;\r\nvar xml = \"<root>Hello xml2js!</root>\"\r\nparseString(xml, function (err, result) {\r\n    console.dir(result);\r\n});\r\n```\r\n\r\nCan't get easier than this, right? This works starting with `xml2js` 0.2.3.\r\nWith CoffeeScript it looks like this:\r\n\r\n```coffeescript\r\nparseString = require('xml2js').parseString\r\nxml = \"<root>Hello xml2js!</root>\"\r\nparseString xml, (err, result) ->\r\n    console.dir result\r\n```\r\n\r\nIf you need some special options, fear not, `xml2js` supports a number of\r\noptions (see below), you can specify these as second argument:\r\n\r\n```javascript\r\nparseString(xml, {trim: true}, function (err, result) {\r\n});\r\n```\r\n\r\nSimple as pie usage\r\n-------------------\r\n\r\nThat's right, if you have been using xml-simple or a home-grown\r\nwrapper, this is was added in 0.1.11 just for you:\r\n\r\n```javascript\r\nvar fs = require('fs'),\r\n    xml2js = require('xml2js');\r\n\r\nvar parser = new xml2js.Parser();\r\nfs.readFile(__dirname + '/foo.xml', function(err, data) {\r\n    parser.parseString(data, function (err, result) {\r\n        console.dir(result);\r\n        console.log('Done');\r\n    });\r\n});\r\n```\r\n\r\nLook ma, no event listeners!\r\n\r\nYou can also use `xml2js` from\r\n[CoffeeScript](http://jashkenas.github.com/coffee-script/), further reducing\r\nthe clutter:\r\n\r\n```coffeescript\r\nfs = require 'fs',\r\nxml2js = require 'xml2js'\r\n\r\nparser = new xml2js.Parser()\r\nfs.readFile __dirname + '/foo.xml', (err, data) ->\r\n  parser.parseString data, (err, result) ->\r\n    console.dir result\r\n    console.log 'Done.'\r\n```\r\n\r\nBut what happens if you forget the `new` keyword to create a new `Parser`? In\r\nthe middle of a nightly coding session, it might get lost, after all. Worry\r\nnot, we got you covered! Starting with 0.2.8 you can also leave it out, in\r\nwhich case `xml2js` will helpfully add it for you, no bad surprises and\r\ninexplicable bugs!\r\n\r\n\"Traditional\" usage\r\n-------------------\r\n\r\nAlternatively you can still use the traditional `addListener` variant that was\r\nsupported since forever:\r\n\r\n```javascript\r\nvar fs = require('fs'),\r\n    xml2js = require('xml2js');\r\n\r\nvar parser = new xml2js.Parser();\r\nparser.addListener('end', function(result) {\r\n    console.dir(result);\r\n    console.log('Done.');\r\n});\r\nfs.readFile(__dirname + '/foo.xml', function(err, data) {\r\n    parser.parseString(data);\r\n});\r\n```\r\n\r\nIf you want to parse multiple files, you have multiple possibilites:\r\n\r\n  * You can create one `xml2js.Parser` per file. That's the recommended one\r\n    and is promised to always *just work*.\r\n  * You can call `reset()` on your parser object.\r\n  * You can hope everything goes well anyway. This behaviour is not\r\n    guaranteed work always, if ever. Use option #1 if possible. Thanks!\r\n\r\nSo you wanna some JSON?\r\n-----------------------\r\n\r\nJust wrap the `result` object in a call to `JSON.stringify` like this\r\n`JSON.stringify(result)`. You get a string containing the JSON representation\r\nof the parsed object that you can feed to JSON-hungry consumers.\r\n\r\nDisplaying results\r\n------------------\r\n\r\nYou might wonder why, using `console.dir` or `console.log` the output at some\r\nlevel is only `[Object]`. Don't worry, this is not because xml2js got lazy.\r\nThat's because Node uses `util.inspect` to convert the object into strings and\r\nthat function stops after `depth=2` which is a bit low for most XML.\r\n\r\nTo display the whole deal, you can use `console.log(util.inspect(result, false,\r\nnull))`, which displays the whole result.\r\n\r\nSo much for that, but what if you use\r\n[eyes](https://github.com/cloudhead/eyes.js) for nice colored output and it\r\ntruncates the output with `…`? Don't fear, there's also a solution for that,\r\nyou just need to increase the `maxLength` limit by creating a custom inspector\r\n`var inspect = require('eyes').inspector({maxLength: false})` and then you can\r\neasily `inspect(result)`.\r\n\r\nOptions\r\n=======\r\n\r\nApart from the default settings, there is a number of options that can be\r\nspecified for the parser. Options are specified by ``new Parser({optionName:\r\nvalue})``. Possible options are:\r\n\r\n  * `attrkey` (default: `$`): Prefix that is used to access the attributes.\r\n    Version 0.1 default was `@`.\r\n  * `charkey` (default: `_`): Prefix that is used to access the character\r\n    content. Version 0.1 default was `#`.\r\n  * `explicitCharkey` (default: `false`)\r\n  * `trim` (default: `false`): Trim the whitespace at the beginning and end of\r\n    text nodes.\r\n  * `normalizeTags` (default: `false`): Normalize all tag names to lowercase.\r\n  * `normalize` (default: `false`): Trim whitespaces inside text nodes.\r\n  * `explicitRoot` (default: `true`): Set this if you want to get the root\r\n    node in the resulting object.\r\n  * `emptyTag` (default: `undefined`): what will the value of empty nodes be.\r\n    Default is `{}`.\r\n  * `explicitArray` (default: `true`): Always put child nodes in an array if\r\n    true; otherwise an array is created only if there is more than one.\r\n  * `ignoreAttrs` (default: `false`): Ignore all XML attributes and only create\r\n    text nodes.\r\n  * `mergeAttrs` (default: `false`): Merge attributes and child elements as\r\n    properties of the parent, instead of keying attributes off a child\r\n    attribute object. This option is ignored if `ignoreAttrs` is `false`.\r\n  * `validator` (default `null`): You can specify a callable that validates\r\n    the resulting structure somehow, however you want. See unit tests\r\n    for an example.\r\n  * `xmlns` (default `false`): Give each element a field usually called '$ns'\r\n    (the first character is the same as attrkey) that contains its local name\r\n    and namespace URI.\r\n  * `explicitChildren` (default `false`): Put child elements to separate\r\n    property. Doesn't work with `mergeAttrs = true`. If element has no children\r\n    then \"children\" won't be created. Added in 0.2.5.\r\n  * `childkey` (default `$$`): Prefix that is used to access child elements if\r\n    `explicitChildren` is set to `true`. Added in 0.2.5.\r\n  * `charsAsChildren` (default `false`): Determines whether chars should be\r\n    considered children if `explicitChildren` is on. Added in 0.2.5.\r\n  * `async` (default `false`): Should the callbacks be async? This *might* be\r\n    an incompatible change if your code depends on sync execution of callbacks.\r\n    xml2js 0.3 might change this default, so the recommendation is to not\r\n    depend on sync execution anyway. Added in 0.2.6.\r\n  * `strict` (default `true`): Set sax-js to strict or non-strict parsing mode.\r\n    Defaults to `true` which is *highly* recommended, since parsing HTML which\r\n    is not well-formed XML might yield just about anything. Added in 0.2.7.\r\n\r\nUpdating to new version\r\n=======================\r\n\r\nVersion 0.2 changed the default parsing settings, but version 0.1.14 introduced\r\nthe default settings for version 0.2, so these settings can be tried before the\r\nmigration.\r\n\r\n```javascript\r\nvar xml2js = require('xml2js');\r\nvar parser = new xml2js.Parser(xml2js.defaults[\"0.2\"]);\r\n```\r\n\r\nTo get the 0.1 defaults in version 0.2 you can just use\r\n`xml2js.defaults[\"0.1\"]` in the same place. This provides you with enough time\r\nto migrate to the saner way of parsing in xml2js 0.2. We try to make the\r\nmigration as simple and gentle as possible, but some breakage cannot be\r\navoided.\r\n\r\nSo, what exactly did change and why? In 0.2 we changed some defaults to parse\r\nthe XML in a more universal and sane way. So we disabled `normalize` and `trim`\r\nso xml2js does not cut out any text content. You can reenable this at will of\r\ncourse. A more important change is that we return the root tag in the resulting\r\nJavaScript structure via the `explicitRoot` setting, so you need to access the\r\nfirst element. This is useful for anybody who wants to know what the root node\r\nis and preserves more information. The last major change was to enable\r\n`explicitArray`, so everytime it is possible that one might embed more than one\r\nsub-tag into a tag, xml2js >= 0.2 returns an array even if the array just\r\nincludes one element. This is useful when dealing with APIs that return\r\nvariable amounts of subtags.\r\n\r\nRunning tests, development\r\n==========================\r\n\r\n[![Build Status](https://secure.travis-ci.org/Leonidas-from-XIV/node-xml2js.png?branch=master)](https://travis-ci.org/Leonidas-from-XIV/node-xml2js)\r\n\r\nThe development requirements are handled by npm, you just need to install them.\r\nWe also have a number of unit tests, they can be run using `npm test` directly\r\nfrom the project root. This runs zap to discover all the tests and execute\r\nthem.\r\n\r\nIf you like to contribute, keep in mind that xml2js is written in CoffeeScript,\r\nso don't develop on the JavaScript files that are checked into the repository\r\nfor convenience reasons. Also, please write some unit test to check your\r\nbehaviour and if it is some user-facing thing, add some documentation to this\r\nREADME, so people will know it exists. Thanks in advance!\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Leonidas-from-XIV/node-xml2js.git"
  },
  "scripts": {
    "test": "zap"
  },
  "version": "0.2.8"
}
